// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentEnrollmentSystem.Data;

#nullable disable

namespace StudentEnrollmentSystem.Migrations
{
    [DbContext(typeof(SESContext))]
    [Migration("20230423055807_reconfig_sections")]
    partial class reconfig_sections
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence<int>("StudentNo")
                .StartsAt(999L);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "747c9aba-15d5-4a37-97cb-46e4a2e4c3cf",
                            ConcurrencyStamp = "8c4145ff-cb96-4aee-bb1c-b51b9a3edf66",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "c1742731-5847-4179-a6e9-481c8e72a7da",
                            ConcurrencyStamp = "e5a82be4-136a-42da-9cad-c77731b93b06",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR StudentNo");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CourseID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DeptID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DeptID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            DeptID = -1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Faculty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("DeptID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DeptID");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Section", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullSchedule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Day = "Monday",
                            EndTime = "8:30AM",
                            FullSchedule = "Monday, 7:00AM-8:30AM",
                            SectionCode = "MAB",
                            StartTime = "7:00AM"
                        },
                        new
                        {
                            ID = 2,
                            Day = "Monday",
                            EndTime = "10:00AM",
                            FullSchedule = "Monday, 8:30AM-10:00AM",
                            SectionCode = "MBC",
                            StartTime = "8:30AM"
                        },
                        new
                        {
                            ID = 3,
                            Day = "Monday",
                            EndTime = "11:30AM",
                            FullSchedule = "Monday, 10:00AM-11:30AM",
                            SectionCode = "MCD",
                            StartTime = "10:00AM"
                        },
                        new
                        {
                            ID = 4,
                            Day = "Monday",
                            EndTime = "1:00PM",
                            FullSchedule = "Monday, 11:30AM-1:00PM",
                            SectionCode = "MDE",
                            StartTime = "11:30AM"
                        },
                        new
                        {
                            ID = 5,
                            Day = "Monday",
                            EndTime = "2:30PM",
                            FullSchedule = "Monday, 1:00PM-2:30PM",
                            SectionCode = "MEF",
                            StartTime = "1:00PM"
                        },
                        new
                        {
                            ID = 6,
                            Day = "Monday",
                            EndTime = "4:00PM",
                            FullSchedule = "Monday, 2:30PM-4:00PM",
                            SectionCode = "MFG",
                            StartTime = "2:30PM"
                        },
                        new
                        {
                            ID = 7,
                            Day = "Monday",
                            EndTime = "5:30PM",
                            FullSchedule = "Monday, 4:00PM-5:30PM",
                            SectionCode = "MGH",
                            StartTime = "4:00PM"
                        },
                        new
                        {
                            ID = 8,
                            Day = "Monday",
                            EndTime = "7:00PM",
                            FullSchedule = "Monday, 5:30PM-7:00PM",
                            SectionCode = "MHI",
                            StartTime = "5:30PM"
                        },
                        new
                        {
                            ID = 9,
                            Day = "Monday",
                            EndTime = "8:30PM",
                            FullSchedule = "Monday, 7:00PM-8:30PM",
                            SectionCode = "MIJ",
                            StartTime = "7:00PM"
                        },
                        new
                        {
                            ID = 10,
                            Day = "Tuesday",
                            EndTime = "8:30AM",
                            FullSchedule = "Tuesday, 7:00AM-8:30AM",
                            SectionCode = "TAB",
                            StartTime = "7:00AM"
                        },
                        new
                        {
                            ID = 11,
                            Day = "Tuesday",
                            EndTime = "10:00AM",
                            FullSchedule = "Tuesday, 8:30AM-10:00AM",
                            SectionCode = "TBC",
                            StartTime = "8:30AM"
                        },
                        new
                        {
                            ID = 12,
                            Day = "Tuesday",
                            EndTime = "11:30AM",
                            FullSchedule = "Tuesday, 10:00AM-11:30AM",
                            SectionCode = "TCD",
                            StartTime = "10:00AM"
                        },
                        new
                        {
                            ID = 13,
                            Day = "Tuesday",
                            EndTime = "1:00PM",
                            FullSchedule = "Tuesday, 11:30AM-1:00PM",
                            SectionCode = "TDE",
                            StartTime = "11:30AM"
                        },
                        new
                        {
                            ID = 14,
                            Day = "Tuesday",
                            EndTime = "2:30PM",
                            FullSchedule = "Tuesday, 1:00PM-2:30PM",
                            SectionCode = "TEF",
                            StartTime = "1:00PM"
                        },
                        new
                        {
                            ID = 15,
                            Day = "Tuesday",
                            EndTime = "4:00PM",
                            FullSchedule = "Tuesday, 2:30PM-4:00PM",
                            SectionCode = "TFG",
                            StartTime = "2:30PM"
                        },
                        new
                        {
                            ID = 16,
                            Day = "Tuesday",
                            EndTime = "5:30PM",
                            FullSchedule = "Tuesday, 4:00PM-5:30PM",
                            SectionCode = "TGH",
                            StartTime = "4:00PM"
                        },
                        new
                        {
                            ID = 17,
                            Day = "Tuesday",
                            EndTime = "7:00PM",
                            FullSchedule = "Tuesday, 5:30PM-7:00PM",
                            SectionCode = "THI",
                            StartTime = "5:30PM"
                        },
                        new
                        {
                            ID = 18,
                            Day = "Tuesday",
                            EndTime = "8:30PM",
                            FullSchedule = "Tuesday, 7:00PM-8:30PM",
                            SectionCode = "TIJ",
                            StartTime = "7:00PM"
                        },
                        new
                        {
                            ID = 19,
                            Day = "Wednesday",
                            EndTime = "8:30AM",
                            FullSchedule = "Wednesday, 7:00AM-8:30AM",
                            SectionCode = "WAB",
                            StartTime = "7:00AM"
                        },
                        new
                        {
                            ID = 20,
                            Day = "Wednesday",
                            EndTime = "10:00AM",
                            FullSchedule = "Wednesday, 8:30AM-10:00AM",
                            SectionCode = "WBC",
                            StartTime = "8:30AM"
                        },
                        new
                        {
                            ID = 21,
                            Day = "Wednesday",
                            EndTime = "11:30AM",
                            FullSchedule = "Wednesday, 10:00AM-11:30AM",
                            SectionCode = "WCD",
                            StartTime = "10:00AM"
                        },
                        new
                        {
                            ID = 22,
                            Day = "Wednesday",
                            EndTime = "1:00PM",
                            FullSchedule = "Wednesday, 11:30AM-1:00PM",
                            SectionCode = "WDE",
                            StartTime = "11:30AM"
                        },
                        new
                        {
                            ID = 23,
                            Day = "Wednesday",
                            EndTime = "2:30PM",
                            FullSchedule = "Wednesday, 1:00PM-2:30PM",
                            SectionCode = "WEF",
                            StartTime = "1:00PM"
                        },
                        new
                        {
                            ID = 24,
                            Day = "Wednesday",
                            EndTime = "4:00PM",
                            FullSchedule = "Wednesday, 2:30PM-4:00PM",
                            SectionCode = "WFG",
                            StartTime = "2:30PM"
                        },
                        new
                        {
                            ID = 25,
                            Day = "Wednesday",
                            EndTime = "5:30PM",
                            FullSchedule = "Wednesday, 4:00PM-5:30PM",
                            SectionCode = "WGH",
                            StartTime = "4:00PM"
                        },
                        new
                        {
                            ID = 26,
                            Day = "Wednesday",
                            EndTime = "7:00PM",
                            FullSchedule = "Wednesday, 5:30PM-7:00PM",
                            SectionCode = "WHI",
                            StartTime = "5:30PM"
                        },
                        new
                        {
                            ID = 27,
                            Day = "Wednesday",
                            EndTime = "8:30PM",
                            FullSchedule = "Wednesday, 7:00PM-8:30PM",
                            SectionCode = "WIJ",
                            StartTime = "7:00PM"
                        },
                        new
                        {
                            ID = 28,
                            Day = "Thursday",
                            EndTime = "8:30AM",
                            FullSchedule = "Thursday, 7:00AM-8:30AM",
                            SectionCode = "HAB",
                            StartTime = "7:00AM"
                        },
                        new
                        {
                            ID = 29,
                            Day = "Thursday",
                            EndTime = "10:00AM",
                            FullSchedule = "Thursday, 8:30AM-10:00AM",
                            SectionCode = "HBC",
                            StartTime = "8:30AM"
                        },
                        new
                        {
                            ID = 30,
                            Day = "Thursday",
                            EndTime = "11:30AM",
                            FullSchedule = "Thursday, 10:00AM-11:30AM",
                            SectionCode = "HCD",
                            StartTime = "10:00AM"
                        },
                        new
                        {
                            ID = 31,
                            Day = "Thursday",
                            EndTime = "1:00PM",
                            FullSchedule = "Thursday, 11:30AM-1:00PM",
                            SectionCode = "HDE",
                            StartTime = "11:30AM"
                        },
                        new
                        {
                            ID = 32,
                            Day = "Thursday",
                            EndTime = "2:30PM",
                            FullSchedule = "Thursday, 1:00PM-2:30PM",
                            SectionCode = "HEF",
                            StartTime = "1:00PM"
                        },
                        new
                        {
                            ID = 33,
                            Day = "Thursday",
                            EndTime = "4:00PM",
                            FullSchedule = "Thursday, 2:30PM-4:00PM",
                            SectionCode = "HFG",
                            StartTime = "2:30PM"
                        },
                        new
                        {
                            ID = 34,
                            Day = "Thursday",
                            EndTime = "5:30PM",
                            FullSchedule = "Thursday, 4:00PM-5:30PM",
                            SectionCode = "HGH",
                            StartTime = "4:00PM"
                        },
                        new
                        {
                            ID = 35,
                            Day = "Thursday",
                            EndTime = "7:00PM",
                            FullSchedule = "Thursday, 5:30PM-7:00PM",
                            SectionCode = "HHI",
                            StartTime = "5:30PM"
                        },
                        new
                        {
                            ID = 36,
                            Day = "Thursday",
                            EndTime = "8:30PM",
                            FullSchedule = "Thursday, 7:00PM-8:30PM",
                            SectionCode = "HIJ",
                            StartTime = "7:00PM"
                        },
                        new
                        {
                            ID = 37,
                            Day = "Friday",
                            EndTime = "8:30AM",
                            FullSchedule = "Friday, 7:00AM-8:30AM",
                            SectionCode = "FAB",
                            StartTime = "7:00AM"
                        },
                        new
                        {
                            ID = 38,
                            Day = "Friday",
                            EndTime = "10:00AM",
                            FullSchedule = "Friday, 8:30AM-10:00AM",
                            SectionCode = "FBC",
                            StartTime = "8:30AM"
                        },
                        new
                        {
                            ID = 39,
                            Day = "Friday",
                            EndTime = "11:30AM",
                            FullSchedule = "Friday, 10:00AM-11:30AM",
                            SectionCode = "FCD",
                            StartTime = "10:00AM"
                        },
                        new
                        {
                            ID = 40,
                            Day = "Friday",
                            EndTime = "1:00PM",
                            FullSchedule = "Friday, 11:30AM-1:00PM",
                            SectionCode = "FDE",
                            StartTime = "11:30AM"
                        },
                        new
                        {
                            ID = 41,
                            Day = "Friday",
                            EndTime = "2:30PM",
                            FullSchedule = "Friday, 1:00PM-2:30PM",
                            SectionCode = "FEF",
                            StartTime = "1:00PM"
                        },
                        new
                        {
                            ID = 42,
                            Day = "Friday",
                            EndTime = "4:00PM",
                            FullSchedule = "Friday, 2:30PM-4:00PM",
                            SectionCode = "FFG",
                            StartTime = "2:30PM"
                        },
                        new
                        {
                            ID = 43,
                            Day = "Friday",
                            EndTime = "5:30PM",
                            FullSchedule = "Friday, 4:00PM-5:30PM",
                            SectionCode = "FGH",
                            StartTime = "4:00PM"
                        },
                        new
                        {
                            ID = 44,
                            Day = "Friday",
                            EndTime = "7:00PM",
                            FullSchedule = "Friday, 5:30PM-7:00PM",
                            SectionCode = "FHI",
                            StartTime = "5:30PM"
                        },
                        new
                        {
                            ID = 45,
                            Day = "Friday",
                            EndTime = "8:30PM",
                            FullSchedule = "Friday, 7:00PM-8:30PM",
                            SectionCode = "FIJ",
                            StartTime = "7:00PM"
                        },
                        new
                        {
                            ID = 46,
                            Day = "Saturday",
                            EndTime = "8:30AM",
                            FullSchedule = "Saturday, 7:00AM-8:30AM",
                            SectionCode = "SAB",
                            StartTime = "7:00AM"
                        },
                        new
                        {
                            ID = 47,
                            Day = "Saturday",
                            EndTime = "10:00AM",
                            FullSchedule = "Saturday, 8:30AM-10:00AM",
                            SectionCode = "SBC",
                            StartTime = "8:30AM"
                        },
                        new
                        {
                            ID = 48,
                            Day = "Saturday",
                            EndTime = "11:30AM",
                            FullSchedule = "Saturday, 10:00AM-11:30AM",
                            SectionCode = "SCD",
                            StartTime = "10:00AM"
                        },
                        new
                        {
                            ID = 49,
                            Day = "Saturday",
                            EndTime = "1:00PM",
                            FullSchedule = "Saturday, 11:30AM-1:00PM",
                            SectionCode = "SDE",
                            StartTime = "11:30AM"
                        },
                        new
                        {
                            ID = 50,
                            Day = "Saturday",
                            EndTime = "2:30PM",
                            FullSchedule = "Saturday, 1:00PM-2:30PM",
                            SectionCode = "SEF",
                            StartTime = "1:00PM"
                        },
                        new
                        {
                            ID = 51,
                            Day = "Saturday",
                            EndTime = "4:00PM",
                            FullSchedule = "Saturday, 2:30PM-4:00PM",
                            SectionCode = "SFG",
                            StartTime = "2:30PM"
                        },
                        new
                        {
                            ID = 52,
                            Day = "Saturday",
                            EndTime = "5:30PM",
                            FullSchedule = "Saturday, 4:00PM-5:30PM",
                            SectionCode = "SGH",
                            StartTime = "4:00PM"
                        },
                        new
                        {
                            ID = 53,
                            Day = "Saturday",
                            EndTime = "7:00PM",
                            FullSchedule = "Saturday, 5:30PM-7:00PM",
                            SectionCode = "SHI",
                            StartTime = "5:30PM"
                        },
                        new
                        {
                            ID = 54,
                            Day = "Saturday",
                            EndTime = "8:30PM",
                            FullSchedule = "saturday, 7:00PM-8:30PM",
                            SectionCode = "SIJ",
                            StartTime = "7:00PM"
                        });
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.StudentSubject", b =>
                {
                    b.Property<string>("StudentID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "SubjectID");

                    b.HasIndex("SubjectID");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("ClassSize")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("FacultyID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionID")
                        .HasColumnType("int");

                    b.Property<int>("Units")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("FacultyID");

                    b.HasIndex("SectionID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApplicationUser", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Course", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DeptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Faculty", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Department", "Department")
                        .WithMany("Faculties")
                        .HasForeignKey("DeptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.StudentSubject", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.ApplicationUser", "Student")
                        .WithMany("Subjects")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.Subject", "Subject")
                        .WithMany("Students")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Subject", b =>
                {
                    b.HasOne("StudentEnrollmentSystem.Models.Course", "Course")
                        .WithMany("Subjects")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.Faculty", "Faculty")
                        .WithMany("Subjects")
                        .HasForeignKey("FacultyID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("StudentEnrollmentSystem.Models.Section", "Section")
                        .WithMany("Subjects")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Faculty");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.ApplicationUser", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Course", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Faculty", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Section", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentEnrollmentSystem.Models.Subject", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
